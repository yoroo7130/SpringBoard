<?xml version="1.0" encoding="UTF-8"?>

<!-- ...131p.http://www.mybatis.org/mybatis-3/getting-started.html 아래쪽 Exploring 
	Mapped SQL Statements 참조. XML Mapper를 작성할 때는 클래스의 패키지와 유사한 용도로, MyBatis내에서 
	원하는 SQL문을 찾을 수 있는 namespace 설정에 가장 신경을 많이 써야 함. XML Mapper는 root-context.xml에서 
	스프링이 인식하도록 등록함. /zex00/src/main/webapp/WEB-INF/spring/root-context.xml -->
 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- MyBatis는 기본적으로 PreparedStatement를 이용해서 처리됨. 개발자가 PreparedStatement에 
	들어가는 파라미터를 사용할 때는 '#{}'기호를 이용해서 처리함. '#{}'의 규칙. 1. 파라미터가 여러 속성을 가진 객체인 경우 
	'#{num}'은 getNum() or setNum()을 의미함. 2. 파라미터가 하나이고, 기본자료형이나 문자열인 경우 값이 그대로 
	전달됨. 3. 파라미터가 Map타입인 경우 '#{num}'은 Map객체의 키값이 'num'인 값을 찾는다. -->

<!-- 패키지익스플로러에서 프로젝트 경로구조와 상관없이 개발자가 mapper태그의 namespace 속성값을 지정한 것이 프로젝트에서 
	통용되는 경로명으로 인식됨. -->
<mapper namespace="board">

	<!-- ******************** 게시글 관련 ********************** -->

	<!-- 01. 게시글 전체 목록 조회 및 검색조회까지 -->
	<select id="listAll" resultType="yuhan.mvc.board.dto.BoardVO">
		<!-- 페이지 나누기를 포함한 게시글 목록 -->
		<!-- 페이징 -->
		<include refid="pagingHeader"></include>
		SELECT
		ROWNUM, b_no, b_name, b_subject, b_content, b_date
		FROM
		yuhan_board
		ORDER BY b_no desc
		<!-- 페이징 -->
		<include refid="pagingFooter"></include>
	</select>

	<!-- 02_02. 게시글 레코드 갯수 -->
	<select id="countArticle" resultType="int">
		SELECT COUNT(*)
		FROM
		yuhan_board
	</select>

	<!-- 02_01. 게시글 작성 -->
	<insert id="insert">
		<!-- 게시글 번호를 시퀀스로 생성 -->

		INSERT INTO yuhan_board (
		b_no, b_name, b_subject, b_content, b_date
		) VALUES (
		yuhan_board_seq.nextval, #{b_name}, #{b_subject}, #{b_content},
		to_date(sysdate)
		)
	</insert>

	<!--03. 게시글 상세보기 조회 -->
	<select id="view" resultType="yuhan.mvc.board.dto.BoardVO">
		<!-- SELECT * FROM tbl_board -->
		SELECT
		b_no, b_name, b_subject, b_content
		FROM
		yuhan_board
		WHERE
		b_no = #{b_no}
	</select>

	<!-- 04. 게시글 수정처리 -->
	<update id="updateArticle">
		UPDATE
		yuhan_board
		SET
		b_subject = #{b_subject},
		b_content = #{b_content}
		WHERE
		b_no = #{b_no}
	</update>

	<!-- 05. 게시글 삭제처리 -->
	<delete id="deleteArticle">
		DELETE FROM yuhan_board
		WHERE b_no = #{b_no}
	</delete>

	<!-- sql code 조각 -->
	<!-- 반복되는 sql의 일부를 sql태그를 이용하여 따로 빼둘수 있다. -->

	<!-- 페이징 sql -->
	<sql id="pagingHeader">
		SELECT * FROM (
		SELECT ROWNUM AS rn, A.* FROM (
	</sql>
	<sql id="pagingFooter">
		) A
		) WHERE rn BETWEEN #{start} AND #{end}
	</sql>
</mapper>

